Part of optimization is taking advantage of different parts of a CPU that may not be obvious to the compiler. In this case there were two changes that were attempted, having a lookup table, and fix point multiplication.

In this test I was looking at simulated sound samples, changing the volume and outputting the result.
<pre>#include 
#include 
#include 
#include "vol.h"

// Function to scale a sound sample using a volume_factor
// in the range of 0.00 to 1.00.
static inline int16_t scale_sample(int16_t sample, float volume_factor) {
	return (int16_t) (volume_factor * (float) sample);
}

int main() {

	// Allocate memory for large in and out arrays
	int16_t*	in;
	int16_t*	out;
	in = (int16_t*) calloc(SAMPLES, sizeof(int16_t));
	out = (int16_t*) calloc(SAMPLES, sizeof(int16_t));

	int		x;
	int		ttl;

	// Seed the pseudo-random number generator
	srand(-1);

	// Fill the array with random data
	for (x = 0; x < SAMPLES; x++) {
		in[x] = (rand()%65536)-32768;
	}

	// ######################################
	// This is the interesting part!
	// Scale the volume of all of the samples
	for (x = 0; x < SAMPLES; x++) {
		out[x] = scale_sample(in[x], 0.75);
	}
	// ######################################

	// Sum up the data
	for (x = 0; x < SAMPLES; x++) {
		ttl = (ttl+out[x])%1000;
	}

	// Print the sum
	printf("Result: %d\n", ttl);
	for(int i = 0; i < 5; i++){
		printf("%d\n", out[i]);
	}
	return 0;

}

</pre>
'scale_sample' takes an int_16_t, same bit depth that is used for most sound, and multiplies is by the desired volume, 70%.

The main generates some random numbers for the simulated sound, sends the samples to 'scale_sample()' and prints out a sum for evaluation.

This version of the code will be called vol1.c
<h3>Lookup Table</h3>
There are only so many values that can be expressed by 16bits, so few that we can probably fit them into an array.
<pre>//change the array to match new volume level
void setVolume(int16_t lookup[], float volume_factor) {
	for (int i = -32768; i < 32768; i++) {
		lookup[i + 32768] = (int16_t)((volume_factor * (float)i));
	}
}
// Retreve the sample from the lookup based on the input
static inline int16_t scale_sample(int16_t sample, const int16_t lookup[]) {
	return lookup[sample + 32768];
}

</pre>
These lines of code replace the scale_sample() function with two functions

setVolume() populates an array of possible values at that multiplier

scale_sample() now takes that array and the requested sample and simply returns the preformatted data in the array.

We will call this version vol2.c

//talk about failure
<h3>Fixed point math</h3>
Instead of using floating point arithmetic part of the CPU, this will use the integer arithmetic portion.
<pre>static inline int16_t scale_sample(int16_t sample, float volume_factor) {
	int16_t mul = volume_factor << 16;
	int16_t ret = (sample << 16) * mul;
 	return (int16_t) (ret >> 16);
}
</pre>
This version of the code takes vol1.c and has scale_sample convert the volume to an integer. This this